*writebackupVersionControl.txt*      Version control for writebackup backups. 

		WRITE BACKUP VERSION CONTROL    by Ingo Karkat

Version control functions (diff, restore, history navigation) for backups made
with the writebackup plugin, which have a date file extension in the format
'.YYYYMMDD[a-z]'. 

					    *writebackupVersionControl.vim*
description			|WriteBackupVersionControl-description|
usage	    			|WriteBackupVersionControl-usage|
installation   			|WriteBackupVersionControl-installation|
configuration  			|WriteBackupVersionControl-configuration|
known problems			|WriteBackupVersionControl-known-problems|
todo				|WriteBackupVersionControl-todo|
history				|WriteBackupVersionControl-history|

==============================================================================
DESCRIPTION			       *WriteBackupVersionControl-description*

This script enhances the primitive file backup mechanism provided by
|writebackup.vim|with some functions of real revision control systems like
CVS, RCS or Subversion - without additional software. 
Via Vim commands, you can list and go to all backup versions that exist for
the current file, check whether you have a current backup, backup the saved
version of the buffer even after you've made unsaved changes in the buffer
(which is useful for after-the-fact backups). 
Within Vim, you can create a diff with the previous version, restore the
current file from its predecessor or any other backed-up version. 

==============================================================================
USAGE					     *WriteBackupVersionControl-usage*

						    *:WriteBackupDiffWithPred*
:WriteBackupDiffWithPred
			Perform a diff of the current file (which may be the
			original file or any backup) with the previous
			version. The diff is done inside Vim, with a new
			diffsplit being opened. 
						    *:WriteBackupListVersions*
:WriteBackupListVersions
			List all backup versions that exist for the current
			file. If the file isn't the original, it is marked in
			the version list. If the file is the original, the
			time that has passed since the last backup is printed,
			too. 
				     *:WriteBackupGoPrev* *:WriteBackupGoNext*
:[count]WriteBackupGoPrev[!]
:[count]WriteBackupGoNext[!]
			Open a backup file version relative to the current
			backup or original file (with 'readonly' set to
			prevent accidental edits) . You can skip multiple
			backups via the optional [count]; if the resulting
			index is out of bounds, the first / last available
			backup version is edited.
			Thus, :999WriteBackupGoPrev edits the very first
			existing backup, and :999WriteBackupGoNext edits the
			latest (i.e. most recent) backup.
			With [!], any changes to the current version are
			discarded. 

						      *:WriteBackupGoOriginal*
:WriteBackupGoOriginal[!]
			Edit the original of the current backup file. If
			backups are stored in a different directory, it may
			not be possible to determine the original file. With
			[!], any changes to the current version are discarded. 

						      *:WriteBackupIsBackedUp*
:WriteBackupIsBackedUp
			Check whether the latest backup is identical to the
			(saved version of the) current file (which must be the
			original file). 
						 *:WriteBackupRestoreFromPred*
:WriteBackupRestoreFromPred[!]
			Overwrite the current file (which must be the
			original) with its latest backup. With [!] skips
			confirmation dialog and allows to restore over
			readonly original file. 

					       *:WriteBackupRestoreThisBackup*
:WriteBackupRestoreThisBackup[!]
			Restore the current file as the original file, which
			will be overwritten. With [!] skips confirmation
			dialog and allows to restore over readonly original
			file. 

						 *:WriteBackupOfSavedOriginal*
:WriteBackupOfSavedOriginal[!]
			Instead of backing up the current buffer, back up the
			saved version of the buffer. This comes handy when you
			realize you need a backup only after you've made
			changes to the buffer. 
			With [!], creation of a new backup file is forced: 
			- even if the last backup is identical
			- even when no more backup versions (for this day) are
			  available (the last '.YYYYMMDDz' backup gets
			  overwritten, even if it is readonly)

						*:WriteBackupDeleteLastBackup*
:WriteBackupDeleteLastBackup[!]
			Delete the last backup. With [!] skips confirmation
			dialog and allows to delete readonly backup file. 

==============================================================================
INSTALLATION			      *WriteBackupVersionControl-installation*

This script is packaged as a|vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vba.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the|:UseVimball|command. >
    vim writebackupVersionControl.vba.gz
    :so %
To uninstall, use the|:RmVimball|command. 

DEPENDENCIES			      *WriteBackupVersionControl-dependencies*

- Requires Vim 7.0 or higher. 
- Requires the writebackup plugin (vimscript #1828). 
- External commands "cmp" or "diff" (or equivalent) for comparison. 
- External commands "cp" (Unix) / "copy" and "xcopy" (Windows) for restore
  and backup original file functionality. 

==============================================================================
CONFIGURATION			     *WriteBackupVersionControl-configuration*

For a permanent configuration, put the following commands into your|vimrc|file
(see :help vimrc). 
						 *g:WriteBackup_DiffVertSplit*
To change the default diffsplit from vertical to horizontal, use: >
    let g:WriteBackup_DiffVertSplit = 0
<
					   *g:WriteBackup_CompareShellCommand*
The :WriteBackupIsBackedUp command uses an external compare command (either
"cmp -s" or "diff -q") to determine whether the backup is identical with the
original file. You can overwrite the auto-detected default via: >
    let g:WriteBackup_CompareShellCommand = '/path/to/mycomparecmd --myoption'
The command must take two filespec arguments, return 0 for identical files, 1
for different files and anything else for trouble. 

==============================================================================
KNOWN PROBLEMS			    *WriteBackupVersionControl-known-problems*

TODO					      *WriteBackupVersionControl-todo*

IDEAS									    *
- Implement s:Copy() via readfile() / writefile() Vim functions in binary mode
  as a fallback or configurable? 
- Use readfile() when diff not available (or as an optimization to avoid
  spawning a shell on Windows)? Maybe just checking the first n lines?

==============================================================================
HISTORY					   *WriteBackupVersionControl-history*

2.01	11-May-2009
Backup versions are now opened read-only (through :WriteBackupGoPrev/Next and
:WriteBackupDiffWithPred commands) to prevent the user from accidentally
editing the backup instead of the original. 

2.00	22-Feb-2009
- Using separate autoload script to help speed up Vim startup. This is an
  incompatible change that also requires the corresponding writebackup plugin
  version. *** PLEASE UPDATE writebackup (vimscript #1828), too ***
- BF: :WriteBackupListVersions now handles (and reports) backup files with a
  future date.
- ENH: Allowing to configure compare shell command via
  g:WriteBackup_CompareShellCommand. 
- ENH: Added :WriteBackupDeleteLastBackup command. 
- ENH: Added [!] to the following commands to disable confirmation dialog and
  override readonly target files: :WriteBackupRestoreFromPred, 
  :WriteBackupRestoreThisBackup, :WriteBackupOfSavedOriginal, 
  :WriteBackupDeleteLastBackup	

1.41	16-Feb-2009
Split off documentation into separate help file. Now packaging as VimBall. 

1.40	11-Feb-2009
- Renamed configuration variable from g:writebackup_DiffVertSplit to
  g:WriteBackup_DiffVertSplit. *** PLEASE UPDATE YOUR CONFIGURATION ***
- ENH: Added :WriteBackupGoPrev, :WriteBackupGoNext and :WriteBackupGoOriginal
  commands.
- ENH: :WriteBackupListVersions now includes backup dirspec if backups aren't
  done in the original file's directory.
- BF: :WriteBackupDiffWithPred failed to open the predecessor with the ':set
  autochdir' setting if the CWD has been (temporarily) changed. Now using
  absolute path for the :split command.
- :WriteBackupDiffWithPred doesn't jump to the predecessor window; it now
  moves the cursor back to the originating window; this feels more natural.
- :WriteBackupDiffWithPred now avoids that a previous (open) fold status at
  the cursor position is remembered and obscures the actual differences.
- Added Windows detection via has('win64'). 

1.20	30-Dec-2007
Small Enhancement: :WriteBackupListVersions and :WriteBackupDiffWithPred
claimed "no backups exist" if option 'wildignore' hides the backup files. Now
temporarily resetting the option before glob().  

1.20	18-Sep-2007
- ENH: Added support for writing backup files into a different directory
  (either one static backup dir or relative to the original file). Now
  requires writebackup version 1.20 or later.
- Command :WriteBackupOfSavedOriginal now checks that the file is an original
  one.
- BF: :WriteBackupIsBackedUp doesn't deal correctly with filenames that
  contain special ex characters [%#!]. 

1.00	07-Mar-2007
Added documentation. First release. 

0.01	30-Oct-2006
Started development. 

==============================================================================
Copyright: (C) 2007-2009 by Ingo Karkat
The VIM LICENSE applies to this script; see|copyright|. 

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
