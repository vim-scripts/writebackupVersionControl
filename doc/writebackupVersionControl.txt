*writebackupVersionControl.txt*      Version control for writebackup.vim backups. 

		WRITE BACKUP VERSION CONTROL    by Ingo Karkat

Version control functions (diff, restore, history navigation) for
writebackup.vim backups with date file extension (format '.YYYYMMDD[a-z]'). 

					    *writebackupVersionControl.vim*
description			|WriteBackupVersionControl-description|
usage	    			|WriteBackupVersionControl-usage|
installation   			|WriteBackupVersionControl-installation|
configuration  			|WriteBackupVersionControl-configuration|
integration			|WriteBackupVersionControl-integration|
limitations			|WriteBackupVersionControl-limitations|
assumptions			|WriteBackupVersionControl-assumptions|
known problems			|WriteBackupVersionControl-known-problems|
todo				|WriteBackupVersionControl-todo|
history				|WriteBackupVersionControl-history|

==============================================================================
DESCRIPTION			       *WriteBackupVersionControl-description*

This script enhances the primitive file backup mechanism provided by
|writebackup.vim|with some functions of real revision control systems like
CVS, RCS or Subversion - without additional software. 
Via VIM commands, you can list and go to all backup versions that exist for
the current file, check whether you have a current backup, backup the saved
version of the buffer even after you've made unsaved changes in the buffer
(which is useful for after-the-fact backups). 
Within VIM, you can create a diff with the previous version, restore the
current file from its predecessor or any other backed-up version. 

==============================================================================
USAGE					     *WriteBackupVersionControl-usage*

						    *:WriteBackupDiffWithPred*
:WriteBackupDiffWithPred			    
			Performs a diff of the current file (which may be the
			current version or an older backup) with the previous
			version. The diff is done inside VIM, with a new
			diffsplit being opened. 
						    *:WriteBackupListVersions*
:WriteBackupListVersions
			List all backup versions that exist for the current
			file. If the file isn't the current version, it is
			marked in the version list. If the file is the current
			version, the time that has passed since the last
			backup is printed, too. 

				     *:WriteBackupGoPrev* *:WriteBackupGoNext*
:[count]WriteBackupGoPrev[!]
:[count]WriteBackupGoNext[!]
			Edit a backup file version relative to the current
			backup or original file. You can skip multiple backups
			via the optional [count]; if the resulting index is
			out of bounds, the first / last available backup
			version is edited.
			Thus, :999WriteBackupGoPrev edits the very first
			existing backup, and :999WriteBackupGoNext edits the
			latest backup.
			With [!], any changes to the current version are
			discarded. 

						      *:WriteBackupGoOriginal*
:WriteBackupGoOriginal[!]
			Edit the original of the current backup file. If
			backups are stored in a different directory, it may
			not be possible to determine the original file. With
			[!], any changes to the current version are discarded. 

						      *:WriteBackupIsBackedUp*
:WriteBackupIsBackedUp
			Checks whether the latest backup is identical to the
			(saved version of the) current file (which must be the
			latest version). 
						 *:WriteBackupRestoreFromPred*
:WriteBackupRestoreFromPred
			Overwrites the current file (which must be the latest
			version) with its latest backup. 

					       *:WriteBackupRestoreThisBackup*
:WriteBackupRestoreThisBackup
			Restores the current file as the latest version, which
			will be overwritten. 

						 *:WriteBackupOfSavedOriginal*
:WriteBackupOfSavedOriginal
			Instead of backing up the current buffer, back up the
			saved version of the buffer. This comes handy when you
			realize you need a backup only after you've made
			changes to the buffer. 

==============================================================================
INSTALLATION			      *WriteBackupVersionControl-installation*

This script is packaged as a|vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vba.gz package in VIM; otherwise, decompress
the archive first, e.g. using WinZip. Inside VIM, install by sourcing the
vimball or via the|:UseVimball|command. >
    vim writebackupVersionControl.vba.gz
    :so %
To uninstall, use the|:RmVimball|command. 

				      *WriteBackupVersionControl-dependencies*
- Requires VIM 7.0 or higher. 
- Requires writebackup.vim (vimscript #1828). 
- External commands 'diff', 'cp' (Unix), 'copy' (Windows). 

==============================================================================
CONFIGURATION			     *WriteBackupVersionControl-configuration*

For a permanent configuration, put the following commands into your vimrc file
(see :help vimrc). 
    					  *g:WriteBackup_DiffVertSplit*
To change the default diffsplit from vertical to horizontal, use: >
    let g:WriteBackup_DiffVertSplit = 0
<
==============================================================================
INTEGRATION			       WriteBackupVersionControl-integration

==============================================================================
LIMITATIONS			       WriteBackupVersionControl-limitations

==============================================================================
ASSUMPTIONS			       WriteBackupVersionControl-assumptions

==============================================================================
KNOWN PROBLEMS			    WriteBackupVersionControl-known-problems

==============================================================================
TODO					      *WriteBackupVersionControl-todo*

- Implement s:Copy() via readfile() / writefile() VIM functions in binary mode
  as a fallback or configurable. 
- Use diff -q to avoid output. 
- Catch newer date of backup than current (00:00:-5), happened on Samba share. 
- Use readfile() when diff not available. 

==============================================================================
HISTORY					   *WriteBackupVersionControl-history*

1.41	16-Feb-2009
Split off documentation into separate help file. Now packaging as VimBall. 

1.40	11-Feb-2009
- Renamed configuration variable from g:writebackup_DiffVertSplit to
  g:WriteBackup_DiffVertSplit. *** PLEASE UPDATE YOUR CONFIGURATION ***
- ENH: Added :WriteBackupGoPrev, :WriteBackupGoNext and :WriteBackupGoOriginal
  commands.
- ENH: :WriteBackupListVersions now includes backup dirspec if backups aren't
  done in the original file's directory.
- BF: :WriteBackupDiffWithPred failed to open the predecessor with the ':set
  autochdir' setting if the CWD has been (temporarily) changed. Now using
  absolute path for the :split command.
- :WriteBackupDiffWithPred doesn't jump to the predecessor window; it now
  moves the cursor back to the originating window; this feels more natural.
- :WriteBackupDiffWithPred now avoids that a previous (open) fold status at
  the cursor position is remembered and obscures the actual differences.
- Added Windows detection via has('win64'). 

1.20	30-Dec-2007
Small Enhancement: :WriteBackupListVersions and :WriteBackupDiffWithPred
claimed "no backups exist" if option 'wildignore' hides the backup files. Now
temporarily resetting the option before glob().  

1.20	18-Sep-2007
- ENH: Added support for writing backup files into a different directory
  (either one static backup dir or relative to the original file). Now
  requires writebackup.vim version 1.20 or later.
- Command :WriteBackupOfSavedOriginal now checks that the file is an original
  one.
- BF: :WriteBackupIsBackedUp doesn't deal correctly with filenames that
  contain special ex characters [%#!]. 

1.00	07-Mar-2007
Added documentation. First release. 

0.01	30-Oct-2006
Started development. 

==============================================================================
Copyright: (C) 2007-2009 by Ingo Karkat
The VIM LICENSE applies to this script; see|copyright|. 

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
